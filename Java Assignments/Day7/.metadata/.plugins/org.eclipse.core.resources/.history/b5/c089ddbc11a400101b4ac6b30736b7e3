package com.demo.service;
import java.util.Calendar;
import java.util.Scanner;
import com.demo.beans.Saving;

public class Account {   //Parent

	static Scanner sc = new Scanner(System.in);

	private String FName;
	private String LName;
	private long mob;
	private String email;
	private double bal;
	private String id; // Auto Generated;
	static int ccount = 0;
	static int scount = 0;
	static int dcount = 0;

	static int interest;
	protected static double mini;

	public Account() {
		super();
	}

	public Account(String accType, String fName, String lName, long mob, String email, double bal) {
		super();
		FName = fName;
		LName = lName;
		this.mob = mob;
		this.email = email;
		this.bal = bal;
		this.id = generateId(accType);
	}

	private String generateId(String accType) {

		Calendar c = Calendar.getInstance();

		if (accType.equals("s")) {
			scount++;
			return c.get(Calendar.YEAR) + accType + scount;
		} else if (accType.equals("c")) {
			ccount++;
			return c.get(Calendar.YEAR) + accType + ccount;
		} else if (accType.equals("d")) {
			dcount++;
			return c.get(Calendar.YEAR) + accType + dcount;
		} else {
			return null;
		}
	}

	public String getFName() {
		return FName;
	}

	public void setFName(String fName) {
		FName = fName;
	}

	public String getLName() {
		return LName;
	}

	public void setLName(String lName) {
		LName = lName;
	}

	public long getMob() {
		return mob;
	}

	public void setMob(long mob) {
		this.mob = mob;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public double getBal() {
		return bal;
	}

	public void setBal(double bal) {
		this.bal = bal;
	}

	public String getId() {
		return id;
	}

	@Override
	public String toString() {
		return "Account [FName=" + FName + ", LName=" + LName + ", mob=" + mob + ", email=" + email + ", id=" + id
				+ "]";
	}

	public static Account[] addCustomer() {

		Account[] custArr = new Account[2];

		for (int i = 0; i < custArr.length; i++) {
			System.out.println("--------------------------");
			System.out.println("Enter " + (i + 1) + " Customer");
			System.out.println("--------------------------");
			System.out.println("What type of Account you want to open...");

			String accType = selectAccType();

			sc.nextLine();

			System.out.println("Enter First Name:");
			String fname = sc.nextLine();
//			sc.nextLine();
			System.out.println("Enter Last Name:");
			String lname = sc.nextLine();
//			sc.nextLine();
			System.out.println("Enter Mobile Number:");
			long mob = sc.nextLong();
			sc.nextLine();
			System.out.println();

			System.out.println("Enter Email ID:");
			String email = sc.nextLine();
			System.out.println();

			System.out.println("Enter Total Balance:");
			double bal = sc.nextDouble();
			boolean flag = checkBalance(accType, bal);

			if (flag) {
				Account a = new Account(accType, fname, lname, mob, email, bal);
				custArr[i] = a;
			} else {
				break;
			}

		}
		return custArr;
	}

	private static boolean checkBalance(String accType, double bal) {
		if (accType == "s") {
			if (bal < Account.mini) {
				System.out.println("Balance must be greater than 20,000\n");
				return false;
			}
		}
		return true;
//		else if (accType == "c") {
//			if (bal < Account.minic) {
//				System.out.println("Balance must be greater than 20,000\n");
//				return false;
//			}
//			return true;
//		} 
//		else if (accType == "d") {
//			if (bal < Account.minid) {
//				System.out.println("Balance must be greater than 20,000\n");
//				return false;
//			}
//			return true;
//		} 
	}

	private static String selectAccType() {
		System.out.println("1. Savings \n" + "2. Current \n" + "3. Demat \n");
		System.out.print("Enter a choice for your Account...  ");
		int opt = sc.nextInt();
		switch (opt) {
		case 1:
			System.out.println("You have selected Savings Account");
			return "s";

		case 2:
			System.out.println("You have selected Current Account");
			return "c";

		case 3:
			System.out.println("You have selected Demat Account");
			return "d";

		default:
			System.out.println("Entered Wrong Choice");
		}
		return null;
	}

	public static void displayCusts(Account[] a) {

		for (Account i : a) {
			if (i != null) {
				System.out.println(i);
				System.out.println();
			} else {
				break;
			}
		}

	}
	
	public static Account[] searchCustomer(Account[] a, String fname) {
		Account[] custDetail = new Account[a.length];
		int count = 0;
		for (Account ob : a) {
			if (ob != null && ob.getFName().equals(fname)) {
				custDetail[count++] = ob;
			}
		}
		if (count == 0) {
			System.out.println("Customer Not Found...!" + fname);
			return null;
		}
		return custDetail;
	}
	
	
	
	
	
	

	static Account account;
	static Account a = new Account();
	
	static Saving sObj = new Saving(); 

	public static Account getAccountById(String accId, Account[] custArr) {

		for (Account a : custArr) {
			if (a != null && a.getId() == accId) {
				account = a;
				return a;
			}
		}

		return null;
	}

	public static void services() {

		System.out.println("1. Check Balance\n" + "2. Withdraw Money\n" + "3. Deposit Money\n" + "4. Exit\n");

		int ch = sc.nextInt();

		do {
			switch (ch) {
			case 1:
				System.out.println("Current Balance is : " + account.getBal());
				break;
			case 2:
				System.out.println("Enter Withdraw Ammount...");
				double wm = sc.nextDouble();
				int check = sObj.withdrawMoney(account.getBal(), wm);
				if (check == 1) {
					System.out.println("You SuccessFully Withdraw Money...");
				} else if (check == 2) {
					System.out.println("Sorry, but you have to maintain the Minimum Balance...\n"
							+ "You can't withdraw this amount");
				} else if (check == 3) {
					System.out.println("You can only withdraw " + ((account.getBal()) - (Account.mini)) + " money.");
				}else {
					break;
				}
				break;
				
			case 3:
				

			case 4:
				System.out.println("Thanks for Choosing Our Services");
				System.exit(0);

			default:
				System.out.println("Wrong Entery...");
				System.exit(1);

			}

		} while (!(ch == 4));

	}

}
